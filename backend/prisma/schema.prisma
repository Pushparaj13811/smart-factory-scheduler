// Machine Task Scheduling Platform - Optimized Database Schema
// Multi-tenant SaaS with lookup tables for better data integrity and indexing

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./dbml"
  outputName = "schema.dbml"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// LOOKUP TABLES (REFERENCE DATA)
// ============================================================================

model StatusType {
  id                      String                    @id @default(cuid())
  code                    String                    @unique
  name                    String
  description             String?
  category                String
  sortOrder               Int                       @default(0)
  isActive                Int                       @default(1)
  SystemAdmin             SystemAdmin[]
  SubscriptionPlan        SubscriptionPlan[]
  Subscription            Subscription[]
  Industry                Industry[]
  User                    User[]
  Machine                 Machine[]
  OptimizationRun         OptimizationRun[]
  Notification            Notification[]
  UserNotification        UserNotification[]
  SystemSetting           SystemSetting[]
  MachineWorkerAssignment MachineWorkerAssignment[]
  ComponentOperationStep  ComponentOperationStep[]
  ComponentRawMaterial    ComponentRawMaterial[]
  Order                   Order[]
  OrderItem               OrderItem[]
  Schedule                Schedule[]
  WorkerTask              WorkerTask[]
  TaskApproval            TaskApproval[]

  @@index([category])
  @@map("status_types")
}

model RoleType {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?
  permissions String?
  level       Int
  isActive    Int     @default(1)
  User        User[]

  @@map("role_types")
}

model PriorityType {
  id           String         @id @default(cuid())
  code         String         @unique
  name         String
  description  String?
  color        String?
  sortOrder    Int
  isActive     Int            @default(1)
  Notification Notification[]
  WorkerTask   WorkerTask[]
  Order        Order[]
  Schedule     Schedule[]

  @@map("priority_types")
}

model TaskActionType {
  id           String         @id @default(cuid())
  code         String         @unique
  name         String
  description  String?
  nextActions  String?
  isActive     Int            @default(1)
  TaskApproval TaskApproval[]

  @@map("task_action_types")
}

model NotificationType {
  id           String         @id @default(cuid())
  code         String         @unique
  name         String
  description  String?
  template     String?
  isActive     Int            @default(1)
  Notification Notification[]

  @@map("notification_types")
}

model MachineRoleType {
  id                      String                    @id @default(cuid())
  code                    String                    @unique
  name                    String
  description             String?
  permissions             String?
  isActive                Int                       @default(1)
  MachineWorkerAssignment MachineWorkerAssignment[]

  @@map("machine_role_types")
}

model ProficiencyType {
  id                      String                    @id @default(cuid())
  code                    String                    @unique
  name                    String
  description             String?
  level                   Int
  isActive                Int                       @default(1)
  MachineWorkerAssignment MachineWorkerAssignment[]

  @@map("proficiency_types")
}

model CategoryType {
  id          String     @id @default(cuid())
  code        String     @unique
  name        String
  description String?
  isActive    Int        @default(1)
  Category    Category[]

  @@map("category_types")
}

// ============================================================================
// SYSTEM LEVEL - MULTI-TENANCY
// ============================================================================

model SystemAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  statusId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status StatusType @relation(fields: [statusId], references: [id])

  @@index([statusId])
  @@map("system_admins")
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  price       Int
  features    String
  statusId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
  status        StatusType     @relation(fields: [statusId], references: [id])

  @@index([statusId])
  @@map("subscription_plans")
}

model Subscription {
  id          String   @id @default(cuid())
  planId      String
  statusId    String
  billingInfo String
  paymentInfo String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plan       SubscriptionPlan @relation(fields: [planId], references: [id])
  status     StatusType       @relation(fields: [statusId], references: [id])
  industries Industry[]

  @@index([planId, statusId])
  @@map("subscriptions")
}

model Industry {
  id             String   @id @default(cuid())
  name           String
  code           String   @unique
  contactInfo    String
  subscriptionId String?
  statusId       String
  settings       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  users           User[]
  categories      Category[]
  machines        Machine[]
  components      Component[]
  rawMaterials    RawMaterial[]
  orders          Order[]
  schedules       Schedule[]
  notifications   Notification[]
  AuditLog        AuditLog[]
  OptimizationRun OptimizationRun[]
  SystemSetting   SystemSetting[]

  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  status       StatusType    @relation(fields: [statusId], references: [id])

  @@index([subscriptionId, statusId])
  @@map("industries")
}

// ============================================================================
// CATEGORIES
// ============================================================================

model Category {
  id          String   @id @default(cuid())
  industryId  String
  typeId      String
  name        String
  code        String
  description String?
  statusId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  industry     Industry      @relation(fields: [industryId], references: [id], onDelete: Cascade)
  category     CategoryType  @relation(fields: [typeId], references: [id], onDelete: Cascade)
  machines     Machine[]
  components   Component[]
  rawMaterials RawMaterial[]

  @@unique([industryId, typeId, code])
  @@index([industryId, typeId, statusId])
  @@map("categories")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id          String   @id @default(cuid())
  industryId  String
  email       String
  password    String
  name        String
  roleId      String
  statusId    String
  profile     String?
  preferences String?
  performance String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  industry            Industry                  @relation(fields: [industryId], references: [id], onDelete: Cascade)
  status              StatusType                @relation(fields: [statusId], references: [id])
  role                RoleType                  @relation(fields: [roleId], references: [id])
  machineAssignments  MachineWorkerAssignment[]
  assignedTasks       WorkerTask[]
  supervisorApprovals TaskApproval[]            @relation("SupervisorApprovals")
  notifications       UserNotification[]
  auditLogs           AuditLog[]

  @@unique([industryId, email])
  @@index([industryId, roleId, statusId])
  @@map("users")
}

// ============================================================================
// MACHINE MANAGEMENT
// ============================================================================

model Machine {
  id          String   @id @default(cuid())
  industryId  String
  categoryId  String
  name        String
  shortName   String
  specs       String?
  statusId    String
  maintenance String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  industry          Industry                  @relation(fields: [industryId], references: [id], onDelete: Cascade)
  category          Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  status            StatusType                @relation(fields: [statusId], references: [id], onDelete: Cascade)
  operationSteps    ComponentOperationStep[]
  schedules         Schedule[]
  workerAssignments MachineWorkerAssignment[]

  @@unique([industryId, shortName])
  @@index([industryId, categoryId, statusId])
  @@map("machines")
}

model MachineWorkerAssignment {
  id            String   @id @default(cuid())
  machineId     String
  workerId      String
  assignedBy    String
  roleId        String
  proficiencyId String
  statusId      String
  permissions   String
  training      String?
  performance   String?
  timeframe     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  machine     Machine         @relation(fields: [machineId], references: [id], onDelete: Cascade)
  worker      User            @relation(fields: [workerId], references: [id], onDelete: Cascade)
  role        MachineRoleType @relation(fields: [roleId], references: [id], onDelete: Cascade)
  proficiency ProficiencyType @relation(fields: [proficiencyId], references: [id], onDelete: Cascade)
  status      StatusType      @relation(fields: [statusId], references: [id])

  @@unique([machineId, workerId])
  @@index([roleId, proficiencyId, statusId])
  @@map("machine_worker_assignments")
}

// ============================================================================
// COMPONENT MANAGEMENT
// ============================================================================

model Component {
  id             String   @id @default(cuid())
  industryId     String
  categoryId     String
  name           String
  code           String
  specifications String?
  statusId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  industry       Industry                 @relation(fields: [industryId], references: [id], onDelete: Cascade)
  category       Category                 @relation(fields: [categoryId], references: [id])
  operationSteps ComponentOperationStep[]
  rawMaterials   ComponentRawMaterial[]
  orderItems     OrderItem[]

  @@unique([industryId, code])
  @@index([industryId, categoryId, statusId])
  @@map("components")
}

model ComponentOperationStep {
  id            String   @id @default(cuid())
  componentId   String
  stepNumber    Int
  operationType String
  machineId     String?
  timeConfig    String
  externalInfo  String?
  statusId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  component Component  @relation(fields: [componentId], references: [id], onDelete: Cascade)
  machine   Machine?   @relation(fields: [machineId], references: [id])
  status    StatusType @relation(fields: [statusId], references: [id])

  @@unique([componentId, stepNumber])
  @@index([machineId, statusId])
  @@map("component_operation_steps")
}

model RawMaterial {
  id           String   @id @default(cuid())
  industryId   String
  categoryId   String
  name         String
  specs        String?
  inventory    String
  transactions String?
  statusId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  industry   Industry               @relation(fields: [industryId], references: [id], onDelete: Cascade)
  category   Category               @relation(fields: [categoryId], references: [id])
  components ComponentRawMaterial[]

  @@index([industryId, categoryId, statusId])
  @@map("raw_materials")
}

model ComponentRawMaterial {
  id            String   @id @default(cuid())
  componentId   String
  rawMaterialId String
  quantityInfo  String
  statusId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  component   Component   @relation(fields: [componentId], references: [id], onDelete: Cascade)
  rawMaterial RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  status      StatusType  @relation(fields: [statusId], references: [id])

  @@unique([componentId, rawMaterialId])
  @@index([statusId])
  @@map("component_raw_materials")
}

// ============================================================================
// ORDER MANAGEMENT
// ============================================================================

model Order {
  id           String   @id @default(cuid())
  industryId   String
  orderNumber  String
  customerInfo String?
  priorityId   String
  statusId     String
  timeline     String
  pricing      String?
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  industry  Industry     @relation(fields: [industryId], references: [id], onDelete: Cascade)
  priority  PriorityType @relation(fields: [priorityId], references: [id])
  status    StatusType   @relation(fields: [statusId], references: [id])
  items     OrderItem[]
  schedules Schedule[]

  @@unique([industryId, orderNumber])
  @@index([industryId, priorityId, statusId])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  componentId String
  quantities  String
  pricing     String?
  statusId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  component Component  @relation(fields: [componentId], references: [id])
  status    StatusType @relation(fields: [statusId], references: [id])

  @@unique([orderId, componentId])
  @@index([statusId])
  @@map("order_items")
}

// ============================================================================
// SCHEDULING & TASK MANAGEMENT
// ============================================================================

model Schedule {
  id           String   @id @default(cuid())
  industryId   String
  orderId      String
  machineId    String
  taskInfo     String
  priorityId   String
  statusId     String
  timeframe    String
  optimization String?
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  industry    Industry     @relation(fields: [industryId], references: [id], onDelete: Cascade)
  order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  machine     Machine      @relation(fields: [machineId], references: [id])
  workerTasks WorkerTask[]
  priority    PriorityType @relation(fields: [priorityId], references: [id])
  status      StatusType   @relation(fields: [statusId], references: [id])

  @@index([industryId, orderId, machineId, priorityId, statusId])
  @@map("schedules")
}

model WorkerTask {
  id               String   @id @default(cuid())
  scheduleId       String
  workerId         String
  assignedBy       String
  taskDetails      String
  statusId         String
  priorityId       String
  timeTracking     String?
  workerSubmission String?
  qualityMetrics   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  schedule  Schedule       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  worker    User           @relation(fields: [workerId], references: [id])
  approvals TaskApproval[]
  status    StatusType     @relation(fields: [statusId], references: [id])
  priority  PriorityType   @relation(fields: [priorityId], references: [id])

  @@index([scheduleId, workerId, priorityId, statusId])
  @@map("worker_tasks")
}

model TaskApproval {
  id           String   @id @default(cuid())
  workerTaskId String
  supervisorId String
  actionId     String
  statusId     String
  feedback     String?
  timestamps   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workerTask WorkerTask     @relation(fields: [workerTaskId], references: [id], onDelete: Cascade)
  supervisor User           @relation("SupervisorApprovals", fields: [supervisorId], references: [id])
  action     TaskActionType @relation(fields: [actionId], references: [id])
  status     StatusType     @relation(fields: [statusId], references: [id])

  @@index([supervisorId, actionId, statusId])
  @@map("task_approvals")
}

// ============================================================================
// OPTIMIZATION & ANALYTICS
// ============================================================================

model OptimizationRun {
  id         String   @id @default(cuid())
  industryId String
  typeCode   String
  statusId   String
  parameters String?
  results    String?
  timestamps String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  industry Industry   @relation(fields: [industryId], references: [id], onDelete: Cascade)
  status   StatusType @relation(fields: [statusId], references: [id])

  @@index([industryId, statusId])
  @@map("optimization_runs")
}

// ============================================================================
// NOTIFICATION & COMMUNICATION
// ============================================================================

model Notification {
  id         String    @id @default(cuid())
  industryId String
  typeId     String
  priorityId String
  content    String
  targeting  String?
  statusId   String
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  industry Industry           @relation(fields: [industryId], references: [id], onDelete: Cascade)
  type     NotificationType   @relation(fields: [typeId], references: [id])
  priority PriorityType       @relation(fields: [priorityId], references: [id])
  status   StatusType         @relation(fields: [statusId], references: [id])
  users    UserNotification[]

  @@index([industryId, typeId, priorityId, statusId])
  @@map("notifications")
}

model UserNotification {
  id             String    @id @default(cuid())
  userId         String
  notificationId String
  statusId       String
  readAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id])
  status       StatusType   @relation(fields: [statusId], references: [id])

  @@unique([userId, notificationId])
  @@index([userId, notificationId, statusId])
  @@map("user_notifications")
}

// ============================================================================
// SYSTEM SETTINGS & AUDIT
// ============================================================================

model SystemSetting {
  id         String   @id @default(cuid())
  industryId String?
  key        String
  value      String
  statusId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  industry Industry?  @relation(fields: [industryId], references: [id])
  status   StatusType @relation(fields: [statusId], references: [id])

  @@index([industryId, statusId])
  @@map("system_settings")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  industryId String?
  entity     String
  entityId   String
  action     String
  details    String?
  createdAt  DateTime @default(now())

  user     User?     @relation(fields: [userId], references: [id])
  industry Industry? @relation(fields: [industryId], references: [id])

  @@index([userId, industryId, entity, entityId])
  @@map("audit_logs")
}
